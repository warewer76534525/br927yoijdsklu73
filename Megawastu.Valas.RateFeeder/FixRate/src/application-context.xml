<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:spa="http://code.google.com/p/spring-property-annotations"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans	
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd 
		http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://code.google.com/p/spring-property-annotations
		http://code.google.com/p/spring-property-annotations/spring-property-annotations-1.0.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
">

	<tx:annotation-driven />
	<context:component-scan base-package="com.mgwvalas.fixrate,com.mgwvalas.moneychanger" />
	<context:property-placeholder location="application.properties" />

	<context:annotation-config />

	<!-- JMS Configuration -->
	
	<bean id="connectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
	    <property name="connectionFactory">
	      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
	        <property name="brokerURL">
	          <value>${jms.brokerURL}</value>
	        </property>
	      </bean>
	    </property>
  	</bean>
  
	<!-- jms destination config -->
	
	<bean id="fixRateListenerDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="${jms.fixRate.topic}" />
	</bean>
	<bean id="staleDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="${jms.stale.topic}" />
	</bean>
	<bean id="kursUpdatedDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="${jms.ratesUpdate.topic}" />
	</bean>
	
	<!-- jms listener config -->
	<!-- disable dblog if log updated to prevent to large data store in database 
	<bean class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="fixRateListenerDestination" />
		<property name="messageListener" ref="logRateUpdatedListener" />
		<property name="sessionTransacted" value="true" />
		<property name="subscriptionDurable" value="true" />
		<property name="clientId" value="logRateUpdatedClient"></property>
	</bean>
 	-->
		
	<jms:listener-container
      container-type="default"
      connection-factory="connectionFactory"
      acknowledge="auto"
      destination-type="topic">
    	<jms:listener destination="${jms.fixRate.topic}" subscription="${jms.fixRate.topic}" 
    	ref="fixRateUpdatedListener" method="onMessage" id="fixRateUpdatedClient" />
  	</jms:listener-container>
	
	<jms:listener-container
      container-type="default"
      connection-factory="connectionFactory"
      acknowledge="auto"
      destination-type="topic">
    	<jms:listener destination="${jms.stale.topic}" subscription="${jms.stale.topic}" 
    	ref="staleUpdatedListener" method="onMessage" id="staleUpdatedClient" />
  	</jms:listener-container>
  	
	<jms:listener-container
      container-type="default"
      connection-factory="connectionFactory"
      acknowledge="auto"
      destination-type="topic">
    	<jms:listener destination="${jms.holiday.topic}" subscription="${jms.holiday.topic}" 
    	ref="holidayListener" method="onMessage" id="fixRateHolidayListenerClient" />
  	</jms:listener-container>
  	
	<!-- JMS Publisher configuration -->
 	
	<bean id="staleJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="receiveTimeout" value="10000" />
		<property name="defaultDestination" ref="staleDestination"></property>
		<property name="messageConverter" ref="serializableMessageConverter"></property>
	</bean>
	
	<!-- Bean Config -->
	<bean id="fixRateService"
		class="com.mgwvalas.fixrate.service.FixRateService">
		<property name="directory" value="${rate.directory}"></property>
		<property name="fileName" value="${rate.fileName}"></property>
	</bean>
	
	
	<!-- Scheduler CONFIGURATION -->
	<bean name="endOfDayJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass"
			value="com.mgwvalas.fixrate.scheduler.EndOfDayJob" />

		<property name="jobDataAsMap">
			<map>
				<entry key="fixRateService" value-ref="fixRateService" />
			</map>
		</property>
	</bean>
	
	<!-- Scheduler CONFIGURATION -->
	<bean name="holidayJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass"
			value="com.mgwvalas.fixrate.scheduler.HolidayCheckerJob" />

		<property name="jobDataAsMap">
			<map>
				<entry key="fixRateService" value-ref="fixRateService" />
				<entry key="configurationDao" value-ref="configurationDao" />
			</map>
		</property>
	</bean>
	
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="holidayJob" />
		<property name="cronExpression" value="${endofday.cron}" />
	</bean>
	
	<bean id="holidayCheckerTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="endOfDayJob" />
		<property name="cronExpression" value="${endofday.cron}" />
	</bean>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobDetails">
			<list>
				<ref bean="endOfDayJob" />
			</list>
		</property>

		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean>
	
	
	<!-- DB Log Scheduler CONFIGURATION -->
	<bean name="databaseRateLogJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass"
			value="com.mgwvalas.fixrate.scheduler.DatabaseRateLogJob" />

		<property name="jobDataAsMap">
			<map>
				<entry key="fixRateService" value-ref="fixRateService" />
				<entry key="rateService" value-ref="rateService" />
				<entry key="ratesBatchLogAppender" value-ref="ratesBatchLogAppender" />
			</map>
		</property>
	</bean>
	
	<bean id="databaseRateLogTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="databaseRateLogJob" />
		<property name="repeatInterval" value="${quartz.dblog.interval}" />
		<property name="startDelay" value="1000" />
	</bean>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobDetails">
			<list>
				<ref bean="databaseRateLogJob" />
			</list>
		</property>

		<property name="triggers">
			<list>
				<ref bean="databaseRateLogTrigger" />
			</list>
		</property>
		
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">20</prop>
				<prop key="org.quartz.threadPool.threadPriority">5</prop>
			</props>
		</property>
	</bean>
	
	
	<bean id="jmsTransactionManager"
		class="org.springframework.jms.connection.JmsTransactionManager">
		<property name="connectionFactory">
			<ref bean="connectionFactory" />
		</property>
	</bean>
		
	<!-- Database Information -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">

		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="10" />
		<property name="maxActive" value="5" />
		<property name="maxWait" value="5000" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		autowire="byType" />
	
	
</beans>
